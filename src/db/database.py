import psycopg2
from psycopg2.extras import DictCursor
from contextlib import contextmanager
from src.utils.config import DB_PARAMS
from typing import List, Dict, Any
import psycopg2
from clickhouse_driver import Client
from datetime import datetime
import time
class DatabaseHandler:
    """
    Handles database operations for storing and retrieving conversation histories.
    
    Attributes:
        dbname (str): The name of the database.
        user (str): The database user.
        password (str): The database password.
        host (str): The database host.
    """

    def __init__(self, dbname: str, user: str, password: str, host: str):
        """
        Initialises the DatabaseHandler with database connection details.

        Args:
            dbname: The name of the database.
            user: The database user.
            password: The database password.
            host: The database host.
        """
        self.dbname = dbname
        self.user = user
        self.password = password
        self.host = host
        self.clickhouse_client = Client('localhost')


    @contextmanager
    def get_db_connection(self):
        """
        Generates a database connection context.
        """
        conn = psycopg2.connect(dbname=self.dbname, user=self.user, password=self.password, host=self.host)
        try:
            yield conn
        finally:
            conn.close()

    @contextmanager
    def get_db_cursor(self, commit: bool = False):
        """
        Generates a database cursor context, optionally committing on exit.

        Args:
            commit: Whether to commit the transaction on exit.
        """
        with self.get_db_connection() as connection:
            cursor = connection.cursor(cursor_factory=DictCursor)
            try:
                yield cursor
                if commit:
                    connection.commit()
            finally:
                cursor.close()

    def insert_conversation(self, user_name: str, message_sent: str, reply_received: str):
        """ Insert a conversation into PostgreSQL and then into ClickHouse """
        with self.get_db_cursor(commit=True) as cursor:
            cursor.execute(
                "INSERT INTO user_conversations (user_name, message_sent, reply_received, date_time) VALUES (%s, %s, %s, %s) RETURNING id, date_time",
                (user_name, message_sent, reply_received, datetime.now())
            )
    #        id, date_time = cursor.fetchone()  # Retrieve the id and datetime generated by PostgreSQL
    #        self.insert_into_clickhouse(id, user_name, message_sent, reply_received, date_time)
    
    # def insert_into_clickhouse(self, id, user_name, message_sent, reply_received, date_time):
    #     """ Insert data into ClickHouse database """
    #     formatted_data = [(str(id), user_name, message_sent, reply_received, date_time)]
    #     self.clickhouse_client.execute(
    #         'INSERT INTO myanalytics.user_conversations (id, user_name, message_sent, reply_received, date_time) VALUES',
    #         formatted_data,
    #         types_check=True
    #     )


    def get_user_history(self, user_name: str, limit: int = 6) -> List[Dict[str, Any]]:
        """
        Retrieves the user's conversation history up to a specified limit.

        Args:
            user_name: The name of the user.
            limit: The maximum number of records to retrieve.

        Returns:
            A list of dictionaries containing the messages sent and replies received.
        """
        with self.get_db_cursor() as cursor:
            cursor.execute(
                "SELECT message_sent, reply_received FROM user_conversations WHERE user_name = %s ORDER BY date_time DESC LIMIT %s",
                (user_name, limit)
            )
            return cursor.fetchall()

     

    def clear_user_history(self, user_name):
        """
        Clears all conversation history for a specific user from the database.

        Args:
            user_name: The unique identifier for the user.
        """
        with self.get_db_cursor(commit=True) as cursor:  
            cursor.execute("DELETE FROM user_conversations WHERE user_name = %s", (str(user_name),))

    def get_message_count(self):
        query = "SELECT COUNT(*) FROM user_conversations;"
        with self.get_db_cursor() as cursor:
            cursor.execute(query)
            result = cursor.fetchone()
            return result[0] if result else None
 